Probable Questions
-> Explain the MVC (Model-View-Controller) architecture in Salesforce?
	Model view controller (MVC) is a software architecture pattern which separates the representation of information from the user’s interaction with it.
	A model notifies its associated views and controllers when there has been a change in its state.[sObjects]
	A controller can send commands to its associated view to change the view’s presentation of the model [Page Layouts,Automation tools like flows,triggers]
	A view requests from the model the information that it needs to generate an output representation. [Tabs,LWC Components,VF Pages]
	
	
-> What is the difference between a Trigger and a Workflow in Salesforce?
	Workflow is automated process that fired an action based on Evaluation criteria and rule criteria.
	We can access a workflow across the object.Trigger is a piece of code that executes before or after a record is inserted or updated.
	
	Workflow
		You cannot create records
		They currently can only result in a task, email, field update, or outbound message
		We can not perform Dml operation in workflow
		We cannot query from database

	Trigger
		Can do these things, but obviously using code.
		Often needed for roll-up type scenarios where roll up summary fields cannot be used
		Often needed when a record needs to be created on a different object
		We can use 20 Dml operations in trigger
		Trigger can be used to invoke a webserive	
	
-> Describe the various types of sandboxes in Salesforce and their use cases.
	Developer Sandbox : Only Metadata is copied | Developement and Unit Tests
	Developer Pro Sandbox : Better version of Dev Sandbox with extra space | QA,Integration
	Partial Sandbox : Metadata with sample data | UAT
	Full Sandbox : Production copy | Staging and Performance Testing
	
-> Explain the difference between a Role and a Profile in Salesforce.
	Roles control record level access
	Profiles control Object level acces
	We can have users without roles
	We cannot have users without profiles
	Roles control what user can see
	Profiles control what user can do
		
-> What is the purpose of the "Master-Detail" relationship in Salesforce?
	In Salesforce, a "Master-Detail" relationship is a type of relationship between two objects where one object,
	known as the "master" or "parent," controls certain behaviors of the other object, known as the "detail" or "child." 
	Purpose and Features :
		Cascade Delete
		Roll-Up Summary Fields
		Security and Access
		Ownership and Control
		Required Fields on Detail Records

-> How can you schedule a job in Salesforce?
	String CRON = 'seconds,minutes,hours,days of month,month,days of week,year(optional)';
					'0,0,0,?,*,*
					'0,0-5,15'
					
	System.Schedule('msg',CRON,new ScheduleClass())
	Other way is via UI
	
	
	
-> What is the difference between SOQL and SOSL?
	SOQL is designed for querying Salesforce records to retrieve data. It allows you to query specific fields on a single object or related objects to fetch records based on specified conditions.
	SOSL is designed for searching across multiple objects simultaneously. It allows you to perform text searches across multiple objects and fields to find records that match a search query.
	Use SOQL when you know in which objects and fields you want to search and retrieve data. It is typically used for querying records within a single object 
	Use SOSL when you want to perform a full-text search across multiple objects to find records that match a given search term. 
		It's particularly useful when you don't know which fields or objects contain the data you are looking for.
		
-> Explain the purpose of a governor limit in Salesforce.
	Governor limits in Salesforce are restrictions imposed by the Salesforce platform to ensure fair usage and prevent misuse of shared resources.
	These limits are in place to guarantee the stability and performance of the multi-tenant environment that Salesforce provides.
	This also helps maintaining Codde Quality,Performance and stability,Multi-tenancy support.
	Governer limits are like:
		no. of DML in onr transaction : 100 Sync,200 async
		No of records fetched in a transaction : 50,000
		CPU usage time limit :10 sec sync,60 sec async
		Email Limits
		
-> How can you handle bulk data processing in Salesforce?
	Data Import Wizards and Data Loader - to insert,update
	Apex Batch Processing to execute custom logics
	Queueable
	
-> Diiference between data loader and Data Import Wizard ?
	Data import wizard can insert,update,upser records in bulk.Cannot export data,cannot delete,Cannot schedule data loads,insert upto 50000 records.Handle Duplication
	Data Loader can insert update,upsert,delete records in bulk,can export,can delete,can schedule,can insert 5 million records,,cannot handle duplication.
	
What is the significance of the "Lookup Relationship" in Salesforce?
What is the importance of the "Roll-up Summary" field in Salesforce?
Explain the use of the Schema Builder in Salesforce.
What is the difference between a Formula Field and a Roll-up Summary Field?
Describe the use of the @future annotation in Apex.
How can you deploy code between Salesforce environments?
Explain the concept of governor limits in Salesforce.
How do you handle security in Salesforce?
Describe the Salesforce Data Model.



-> What is Lightning Web Component (LWC)?
-> Explain the key features and benefits of LWC.
-> How is LWC different from Aura Components?
-> Compare the architecture, performance, and development approach of LWC and Aura Components.
-> What is the lifecycle of an LWC component?
-> Describe the different phases in the lifecycle of an LWC component.
-> What are the key decorators in LWC?
-> Explain the purpose and usage of decorators like @api, @track, @wire, etc.
-> What is the Shadow DOM, and how does it relate to LWC?
-> Discuss the concept of Shadow DOM and its role in LWC.
-> How do you communicate between components in LWC?
-> Explain the various methods for component communication, such as using events, properties, and the Lightning Message Service.
-> What are the best practices for LWC development?
-> Discuss coding standards, performance optimization, and other best practices for LWC development.
-> Explain the concept of Lightning Data Service (LDS).
-> Describe how LDS is used for data retrieval and manipulation in LWC.
-> How do you handle errors in Lightning Web Components?
-> Discuss error handling techniques and best practices in LWC.
-> What is the role of Apex in LWC development?
-> Explain how LWC interacts with Apex classes for server-side actions.
-> What is the Lightning App Builder, and how can LWC be used in it?
-> Discuss the integration of LWC components into the Lightning App Builder.
-> How can you make an LWC component available for use in the Lightning App Builder?
-> Explain the steps to expose an LWC component to be used in the Lightning App Builder.
-> Describe the use of the Lightning Design System (SLDS) in LWC.
-> Discuss how SLDS is utilized for consistent styling in Lightning Web Components.
-> What is the difference between imperative and declarative programming in LWC?
-> Compare the use of imperative and declarative programming in LWC and provide examples.


How do you handle client-side events in LWC?

Explain the process of handling browser events in LWC, including the use of event listeners.
What is the purpose of the connectedCallback method in LWC?

Describe when the connectedCallback lifecycle hook is invoked and how it can be used in LWC.
How can you optimize the performance of LWC components?

Discuss techniques for improving the performance of LWC, including code splitting, lazy loading, and minimizing rendering cycles.
Explain the role of the Lightning App Builder in LWC development.

Discuss how admins can use the Lightning App Builder to create custom user interfaces using LWC components.
What is the difference between the lightning-record-edit-form and lightning-record-view-form in LWC?

Compare the use cases and functionality of these two base components for working with Salesforce records.
How can you implement conditional rendering in LWC?

Discuss the different approaches for conditionally rendering elements or components based on certain criteria.
What is the significance of the @api decorator in LWC?

Explain how the @api decorator is used to expose properties and methods in LWC for parent-child component communication.
How do you handle security considerations in LWC development?

Discuss best practices for handling security concerns, such as preventing Cross-Site Scripting (XSS) vulnerabilities.
What is the role of the Lightning Message Service in LWC?

Explain how the Lightning Message Service facilitates communication between LWC components on different parts of a page or in different tabs.
Can you provide an example of using wire adapters in LWC?

Give a practical example of using the @wire decorator to fetch data from Salesforce or a custom Apex method.
How do you deploy LWC components between Salesforce environments?

Discuss the deployment process and tools used to move LWC components from a sandbox to a production environment.
Explain the concept of local development with LWC.

Discuss how the Salesforce CLI and local development server can be used for developing and testing LWC components locally.
What is the Locker Service in the context of LWC?

Explain the purpose of Locker Service and how it enhances security by isolating components in the DOM.
How can you handle errors in Apex methods called from LWC components?

Discuss error handling strategies, including the use of try-catch blocks and displaying error messages in the UI.
What are the considerations when working with Lightning Web Components for mobile devices?

Discuss responsive design principles and considerations when developing LWC components for mobile users.


