** IF Email is updated on Account email field,all associated contact emails should get updated.
trigger accountTrigger on Account(after update){
	if(trigger.isAfter && trigger.isUpdate){
		accountTriggerHandler.updateRelatedContactsEmail(trigger.new);
	}
}

public class accountTriggerHandler{
	List<Contact>conList = new List<Contact>();
	public static void updateRelatedContactsEmail(List<Account>accList){
		for(Contact c : [SELECT id,accountId FROM Contacts WHERE accountId IN : accList]){
			c.email = c.Account.website;
			conList.add(c);
		}
	}
	try{
		Database.saveResult[] result = Database.update(conList,false);
		for(Database.saveResult sr : result){
			if(!sr.isSuccess()){
				for(Database.Error er : sr.getErrors()){
					system.debug(er);
				}
			}
		}
	}
	catch(Exception e){
	
	}
}


** Account Phone field cannot be empty.
trigger accountTrigger on Account (before insert){
	if(trigger.isBefore && trigger.isInsert){
		AccountTriggerHandler.checkPhoneField(trigger.new);
	}
}

Public Class AccountTriggerHandler{
	public static void checkPhoneField(List<Account> accList){
		if(!accList.isEmpty()){
			for(Account acc : accList){
				if(acc.Phone == null){
					acc.Phone.addError('Phone field is empty.');
				}
			}
		}
	}
}

** Account billing address to account shipping address

trigger AccountTrigger on Account(before insert){
	if(trigger.isBefore && trigger.isInsert && trigger.isUpdate){
		AccountTriggerHandler.insertShippingAddress(trigger.new);
	}
}
Public Class AccountTriggerHandler{
	public static void insertShippingAddress(List<Account>accList){
		if(!accList.isEmpty()){
			for(Account acc : accList){
				acc.shippingCity = acc.billingCity;
				acc.shippingState = acc.billingState;
				acc.shippingCountry = acc.billingCountry;
			}
		}
	}
}

**if Account phone updated,update all related contact's phone [UPDATING CHILD RECORD FROM PARENT]

trigger AccountTrigger on Account(after update){
	if(trigger.isAfter && trigger.isUpdate){
		AccountTriggerHandler.updateRelatedContactsPhone(trigger.new,trigger.oldMap);
	}
}
public class AccountTriggerHandler{
	public static void updateRelatedContactsPhone(List<Account> accList,Map<Id,Account>accMap){
		Map<Id,Account>updatedAccountMap = new Map<Id,Account>();
		List<Contact>updatedConList = new List<Contact>();
		if(!accList.isEmpty()){
			for(Account acc : accList){
				if(acc.Phone != accMap.get(acc.Id).Phone){
					updatedAccountMap.put(acc.Id,acc)
				}
			}
			for(Contact c : [SELECT Id,Phone,AccountId FROM Contact WHERE AccountId :accMap.keySet()]){
				c.Phone = accMap.get(c.AccountId).Phone;
				updatedConList.add(c);
			}
		}
		try{
			Database.SaveResult[] result = Database.update(updatedConList);
			for(Database.SaveResult res : result){
				if(!res.isSuccess()){
					for(Database.Error err : res.getErrors()){
							system.debug(err);
					}
				}
			}
		}
		Catch(Exception e){
			system.debug(e);	
		}
	}
}

*** UPDATE PARENT BY CHILD : UPDATE ACCOUNT'S DESCRIPTION WHEN RELATED CONTACT DESCRIPTION GETS UPDATED

trigger contactTrigger on contact(after update){
	if(trigger.isUpdate && trigger.isAfter){
		contactTriggerHandler.updateAccountDescription(trigger.new,trigger.oldMap);
	}
}
public class contactTriggerHandler{
	public static void updateAccountDescription(List<Contact>conList , Map<Id,Contact>conMap){
		set<Id>accIds = new Set<Id>();
		List<Account>accToUpdate = new List<Account>();
		for(Contact con : conList){
			if(con.Description != conMap.get(con.Id).Description && con.AccountId != null){
				accIds.add(con.AccountId);
			}
		}
		Map<Id,Account>accMap = new Map<Id,Account>[SELECT Id,Description FROM Account WHERE Id IN : accIds];
		for(Contact con : conList){
			accMap.get(con.AccountId).Description = con.Description;
			accToUpdate.add(accMap.get(con.AccountId));
		}
		try{
			Database.SaveResult[] result = Database.update(accToUpdate);
			for(Database.SaveResult res : result){
				if(!res.isSuccess()){
					for(Database.Error err : res.getErrors()){
							system.debug(err);
					}
				}
			}
		}
		Catch(Exception e){
			system.debug(e);	
		}
	}
}

***Rollup Summary Trigger on Account [total contacts associated]

trigger contactTrigger on Contact(after insert,after update,after delete,after undelete){
	if(trigger.isAfter && (trigger.isInsert || trigger.isUndelete)){
		contactTriggerHandler.rollUpContactsAfterInsert(trigger.new); 
	}
	if(trigger.isAfter && trigger.isUpdate){
		contactTriggerHandler.rollUpContactsAfterUpdate(trigger.new,trigger.oldMap);
	}
	if(trigger.isDelete){
		contactTriggerHandler.rollUpContactsAfterDelete(trigger.old,trigger.oldMap);
	}	
}
Public class contactTriggerHandler{
	public static void rollUpContactsAfterInsert(List<Contact>conList){
		Set<Id>accIds = new Set<Id>();
		for(Contact con :conList){
			if(con.AccountId != null){
				accIds.add(con.AccountId);
			}
		}
		updateContactsOnAccount(accIds);
	}
	public static void rollUpContactsAfterUpdate(List<Contact>conList,Map<Id,Contact>conMap){
		Set<Id>accIds = new Set<Id>();
		for(Contact con : conList){
			if(con.AccountId != conMap.get(con.Id).AccountId){
				accIds.add(con.AccountId);
				accIds.add(conMap.get(con.Id).AccountId);
			}
		}
		if(!accIds.isEmpty()){
			updateContactsOnAccount(accIds);
		}
	}
	public static void rollUpContactsAfterDelete(List<Contact>conList,Map<Id,Contact>conMap){
		Set<Id>accIds = new Set<Id>();
		for(Contact con : conList){
			if(con.AccountId != null){
				accIds.add(con.AccountId);
			}
		}
		if(!accIds.isEmpty()){
			updateContactsOnAccount(accIds);
		}	
	}
	public static void updateContactsOnAccount(Set<Ids>accIds){
		List<Account>accList =  [SELECT Id,No_of_Contacts__c ,(SELECT Id FROM Contacts) FROM Account WHERE Id IN : accIds];
		if(!accList.isEmpty()){
			for(Account acc : accList){
				acc.No_of_Contacts__c = acc.Contacts.size();
			}
		}
		try{
			Database.SaveResult[] result = Database.update(accList, TRUE);
			for(Database.SaveResult res : result){
				if(res.isSuccess()){
					system.debug('Contacts updated for : '+res.getId());
				}
				else{
					for(Database.Error err : res.getErrors()){
						System.debug('Error : '+err);
					}
				}
			}
		}Catch(Exception e){
			system.debug(e);
		}
	}
	
}
** Duplicate Account Name
trigger accountTrigger on Account(before insert,before update){
	if(trigger.isBefore && (trigger.isInsert || trigger.isUpdate)){
		AccountTriggerHandler.checkDuplicateName(trigger.new);
	}
}

public class AccountTriggerHandler{
	public static void checkDuplicateName(List<Account>accList){
		List<Account>existingAccs = [SELECT Id,Name FROM Account WHERE Name IN:accList];
		if(!existingAccs.isEmpty){
			for(Account acc:existingAccs){
				acc.addError('Account with same name exists');
			}
		}
	}
}

** create related contact with same phone on Account when custom checbox is checked.

trigger accountTrigger on Account(after insert,after update){
	if(trigger.isAfter && (trigger.isInsert || trigger.isUpdate)){
		AccountTriggerHandler.createContactOnCheckbox(trigger.new);
	}
}
public class AccountTriggerHandler{
	public static createContactOnCheckbox(List<Account>accList){
	list<contact> conList = new list<contact>();
		for(Account acc : accList){
			if(acc.checbox__c == true){
				Contact c = new Contact();
				c.lastName = 'abc';
				c.AccountId = acc.Id;
				c.phone = acc.phone;
				conList.add(c);
			}
		}
		try{
			Database.SaveResult[] result = Database.insert(conList, TRUE);
			for(Database.SaveResult res : result){
				if(res.isSuccess()){
					system.debug('Contacts updated for : '+res.getId());
				}
				else{
					for(Database.Error err : res.getErrors()){
						System.debug('Error : '+err);
					}
				}
			}
		}Catch(Exception e){
			system.debug(e);
		}
	}
}
** Opportunity rollup summary on Account 

trigger opportunityTrigger on Opportunity(after insert,after update,after delete,after undelete){
	if(trigger.isAfter){
		if(trigger.isInsert || trigger.isUndelete){
			OpportunityTriggerHandler.updateAmountOnInsert(trigger.new);
		}
		if(trigger.isUpdate){
			OpportunityTriggerHandler.updateAmountOnUpdate(trigger.new,trigger.oldMap);
		}
		if(trigger.isDelete){
			OpportunityTriggerHandler.updateAmountOnDelete(trigger.old);
		}
	}
	public class OpportunityTriggerHandler{
		Set<Id>accIds = new Set<Id>();
		public static void updateAmountOnInsert(List<opportunity>oppList){
			
			for(Opportunity opp :oppList){
				accIds.add(opp.AccountId);
			}
		}
		updateAmountOnUpdate(List<opportunity>oppList,Map<Id,Opportunity>oppMap){
			for(Opportunity opp:oppList){
				if(opp.AccountId != oppMap.get(opp.Id).AccountId){
					accIds.add(opp.AccountId);
					accIds.add(oppMap.get(opp.Id).AccountId));
				}else{
					accIds.add(opp.AccountId);
				}
			}
		}
		updateAmountOnDelete(List<opportunity>oppList){
			for(Opportunity opp :oppList){
				accIds.add(opp.AccountId);
			}
		}
		if(!accIds.isEmpty()){
			List<Account>accToBeUpdated  = new List<Account>();
			Map<Id, Decimal> IdToRevenue = new Map<Id, Decimal>();
			for(Opportunity opp : [SELECT Id,Amount,AccountId FROM Opportunity WHERE AccountId IN :accIds]){
				Decimal total  = 0;
				if(IdToRevenue.containsKey(opp.AccountId)){
					total = IdToRevenue.get(opp.AccountId);
				}
				if(opp.Amount != null){
					total = total + opp.Amount;
				}
				IdToRevenue.put(opp.AccountId,total);
			}
			if(!IdToRevenue.isEmpty()){
				for(Id i: IdToRevenue.keySet()){
					Account acc = new Account();
					acc.id = i;
					acc.AnnualRevenue = IdToRevenue.get(i);
					accToBeUpdated.add(acc);
				}
			}
		}
		
	}
}

** If opportunity amount > 10,000 make related account rating hot

trigger OpportunityTrigger on Opportunity(after insert,after update){
	if(trigger.isAfter && (trigger.isInsert || trigger.isUpdate)){
		opportunityTriggerHandler.updateAccountRating(trigger.new);
	}
}
public class opportunityTriggerHandler{
	public static void updateAccountRating(List<Opportunity>oppList){
	List<Account>accList = new List<Account>();
		for(Opportunity opp:oppList){
			if(opp.AccountId !=null && opp.Amount > 10000){
				Account a = new Account();
				a.Id = opp.AccountId;
				a.Rating = 'Hot';
				accList.add(a);
			}
		}
		try{
			Database.saveResult[] res = Database.Update(accList);
			for(Database.SaveResult sr : res){
				if(!sr.isSuccess()){
					for(Database.Error er : sr.getErrors()){
						System.debug(er);
					}
				} 
			}
		}
		Catch(Exception e){
		}
		
	}
}

** UPDATE STAGE OF OPPORTUNITIES RELATED TO AN ACCOUNT CLOSED LOST IF OPPORTUNITY IS NOT CLOSED WON AND CREATED DATE > 30 DAYS

trigger accountTrigger on Account(after update){
	if(trigger.isAfter && trigger.isUpdate){
		accountTriggerHandler.updateOpportunityStage(trigger.new);
	}
}
public class accountTriggerHandler{
	List<Opportunity>oppToUpdate = new List<Opportunity>();
	public void updateOpportunityStage(list<Account>accList){
		for(Opportunity opp : [SELECT Id,AccountId FROM Opportunity WHERE AccountId IN :accList]){
			if(Opp.stage != 'closed Won' && Opp.CreatedDate - System.today() > 30){
				opp.stage = 'closed lost';
				oppToUpdate(opp);
			}
		}	
	}
	try{
		Database.SaveResult[] result = Database.update(oppToUpdate);
		for(Database.saveResult sr : result){
			if(!sr.isSuccess()){
				for(Database.Error err : sr.getErrors()){
					debug(err);
					//error framework record;
				}
			}
		}
	}
	catch(Exception e){
		
	}
}

*** PREVENT USER FROM DELETING AN ACCOUNT WITH CONTACT RELATED TO IT
trigger accountTrigger on Account(before delete){
	if(trigger.isBefore && trigger.isDelete){
		accountTriggerHandler.preventAccountDelete(trigger.old);
	}
}
public class accountTriggerHandler{
	public void preventAccountDelete(List<Account>accList){
		for(Account acc : accList){
			if(acc.No_of_Contacts__c > 0 && acc.No_of_Contacts__c != null){
				acc.addError('Account with related contacts cannot be deleted!');
			}
		}
	}
}

*** PREVENT USER TO ADD MORE THAN 2 CONTACTS ON AN ACCOUNT
trigger contactTrigger on Contact(before insert){
	if(trigger.isBefore && trigger.isInsert ){
		contactTriggerHandler.preventContactAdding(trigger.new,trigger.oldMap);
	}
}
public class contactTriggerHandler{
	public static void preventContactAdding(List<Contact>conList){
		Set<Id>accSet = new Set<Id>();
		for(Contact c: conList){
			if(c.AccountId != null){
				accSet.add(c.AccountId);
			}
		}
		for(Account acc : [SELECT Id,(SELECT Id FROM Contacts) FROM Account WHERE Id IN:accSet]){
			if(acc.Contacts.Size() >= 2){
				acc.addError('Maximum COntacts limit reached!');
			}
		}
	}
}

*** UPDATE MAXIMUM AND MINIMUM AMOUNT OF OPPORTUNITIES RELATED TO AN ACCOUNT IN ACCOUNT DESCRIPTION

trigger opportunityTrigger on Opportunity(after insert,after update,after delete,after undelete){
	if(trigger.isAfter && (trigger.isInsert || trigger.isUndelete)){
		opportunityTriggerHandler.updateMaxMinAmountOnAccountOnInsert(trigger.new);
	}
	if(trigger.isAfter && trigger.isUpdate){
		opportunityTriggerHandler.updateMaxMinAmountOnAccountOnUpdate(trigger.new,trigger.oldMap);
	}
	if(trigger.isDelete){
		opportunityTriggerHandler.updateMaxMinAmountOnAccountOnDelete(trigger.old);
	}
}
public class opportunityTriggerHandler{
	Set<Id>accSet = new Set<Id>();
	public static void updateMaxMinAmountOnAccountOnDelete(List<Opportunity>oppList){
		for(Opportunity opp : oppList){
			if(opp.AccountId!=null){
				accSet.add(opp.AccountId);
			}
		}
	}
	public static void updateMaxMinAmountOnAccountOnInsert(List<Opportunity>oppList){
		for(Opportunity opp : oppList){
			if(opp.AccountId!=null){
				accSet.add(opp.AccountId);
			}
		}
	}
	public static void updateMaxMinAmountOnAccountOnUpdate(List<Opportunity>oppList,Map<Id,Opportunity>oppMap){
		for(Opportunity opp : oppList){
			if(opp.AccountId != oppMap.get(opp.Id).AccountId){
				accSet.add(opp.AccountId);
				accset.add(oppMap.get(opp.Id).AccountId);
			}else{
				accSet.add(opp.AccountId);
			}
		}
	}
	List<Account>accList = new List<Account>();
	if(!accSet.isEmpty()){
		for(Opportunity opp : [SELECT Id,AMount,MAX(Amount) maxAMount,MIN(Amount) minAmount  FROM Opportunity WHERE Id AccountId IN:accSet GROUP BY AccountId]){
			Account a = new Account();
			a.Id = opp.AccountId;
			a.Description = opp.MaxAmount +''+opp.minAmount;
			accList.add(a);
		}
		//OR
		for(Account a : [SELECT Id,(SELECT Id,Amount FROM Opportunities WHERE Amount!=null ORDER BY Amount DESC LIMIT 1) FROM ACCOUNT WHERE Id IN:accSet]){
			a.description = acc.Opportunities[0].Amount;
			accList.add(a);
		}
	}
}

*** UPDATE ACCOUNT FIELDS [NEW CASES,WORKING CASE,ESCALATED CASES ]BASED ON THE STATUS OF CASES [NEW,WORKING,ESCALATED]
trigger caseTrigger on case(after insert,after update,after delete,after undelete){
	if(trigger.isAfter && (trigger.isInsert || trigger.isUndelete)){
		caseTriggerHandler.updateAccountStatusOnInsert(trigger.new);
	}
	if(trigger.isAfter &&  trigger.isUpdate){
		caseTriggerHandler.updateAccountStatusOnUpdate(trigger.new,trigger.oldMap);
	}
	if(trigger.isAfter && trigger.isDelete ){
		caseTriggerHandler.updateAccountStatusOnDelete(trigger.old);
	}
}
public class caseTriggerHandler{
	set<Id>accSet = new Set<Id>();
	Map<Id,Integer>newStatusCases = new Map<Id,Integer>();
	Map<Id,Integer>workingStatusCases = new Map<Id,Integer>();
	Map<Id,Integer>escalatedStatusCases = new Map<Id,Integer>();
	public static void updateAccountStatusOnInsert(List<Case>caseList){
		for(Case c : caseList){
			if(c.AccountId!=null)
				accSet.add(c.AccountId);
		}
	}
	public static void updateAccountStatusOnUpdate(List<Case>caseList,Map<Id,Case>caseMap){
		for(Case c : caseList){
			if(c.AccountId != caseMap.get(c.Id).AccountId){
				accSet.add(c.AccountId);
				accSet.add(caseMap.get(c.Id).AccountId);
			}
			else{
				accSet.add(caseMap.get(c.Id).AccountId);
			}
		}
	}
	public static void updateAccountStatusOnDelete(List<Case>caseList){
		for(Case c : caseList){
			if(c.AccountId!=null)
				accSet.add(c.AccountId);
		}
	}
	if(!accSet.isEmpty()){
		Integer newCases = 0;
		Integer esclatedCases = 0;
		Inteegr workingCases = 0;
		for(cases c:[SELECT Id, Status,AccountId from Case WHERE AccountId IN:accSet ]){
			if(c.Status == 'new'){
				newCases = newCases+1;
				newStatusCases.put(c.AccountId,newCases);
			}
			if(c.Status == 'working'){
				workingCases = workingCases+1;
				workingCases.put(c.AccountId,workingCases);
			}
			if(c.Status == 'esclated'){
				esclatedCases = esclatedCases+1;
				esclatedCases.put(c.AccountId,esclatedCases);
			}			
		}
		
	}
}
*** Check a checkbox [custom checkbox : isVIP] on account record whenever the account's annual revenue crosses $100,000
trigger accountTrigger on Account(before insert, before update){
	if(trigger.isBefore){
		if(trigger.isInsert){
			accountTriggerHandler.checkVIPAccountOnInsert(trigger.new);
		}
		else if(trigger.isUpdate){
			accountTriggerHandler.checkVIPAccountOnUpdate(trigger.new,trigger.oldMap)
		}
}

public class accountTriggerHandler{
	public static void checkVIPAccountOnInsert(List<Account>accList){
		for(Account acc : accList){
			if(acc.AnnualRevenue >= 100000){
				acc.isVIP__c = true;
			}
		}
	}
	public static void checkVIPAccountOnUpdate(List<Account>accList,Map<Id,Account>accMap){
		for(Account acc : accList){
			if(acc.AnnualRevenue != accMap.get(acc.Id).AnnualRevenue){
				if(acc.AnnualRevenue >= 100000){
					acc.isVIP__c = true;
				}
			}
		}
	}
}

TestClass
@IsTest
public class accountTriggerHandlerTest{
	
	@TestSetup
	static void setup(){
		List<Account>accList = new List<Account>();
		for(Integer i = 0 ; i < 20 ; i++){
			Account acc = new Account();
			acc.Name = 'test account '+i;
			account.AnnualRevenue = 1000001;
			accList.add(acc);
		}
		insert accList;
	}
	@IsTest
	public static void checkVIPAccountOnInsertTest(){
		List <Account>accLst = [SELECT id,isVIP__c FROM Account Where isVIP__c = true];
		Assert.areEqual(10,accLst.size());
	}
	@IsTest
	public static void checkVIPAccountOnUpdateTest(){
		List <Account>accLst = [SELECT id,AnnualRevenue FROM Account Where AnnualRevenue > 100000 LIMIT 1];
		accLst[0].AnnualRevenue = 12346;
		update accLst;
		List <Account>accList = [SELECT id,isVIP__c FROM Account Where isVIP__c = true];
		Assert.areEqual(9,accList.size());
	}
	
}

*** Check a custom checkbox field of lead object when status of that lead changes to 'Closed-converted'

trigger LeadTrigger on Lead(before insert,before update){
	if(trigger.isBefore){
		if(trigger.isInsert){
			leadTriggerHandler.updateConvertOnInsert(trigger.new);
		}
		if(trigger.isUpdate){
			leadTriggerHandler.updateConvertOnUpdate(trigger.new,trigger.oldMap);
		}
	}
}

public class leadTriggerHandler{
	public void updateConvertOnInsert(List<Lead>leadList){
		for(Lead ld : leadList){
			if(ld.status == 'closed-converted'){
				ld.converted__c = true;
			}
			else{
				ld.converted = false;
			}
		}
	}
	public void updateConvertOnUpdate(List<Lead>leadList,Map<Id,Lead>leadMap){
		for(lead ld : leadList){
			if(ld.status != leadMap.get(ld.Id).status){
				if(ld.status == 'closed-converted'){
					ld.converted__c = true;
				}
				else{
					ld.converted = false;
				}
			}
		}
	}
}

TestClass
@IsTest
public class leadTriggerHandlerTest{
	@TestSetup
	public void setup(){
		List<Lead>leadList = new List<Lead>();
		for(Integer i = 0 ; i < 10 ; i++){
			Lead ld = new Lead();
			ld.LastName = 'test'+i;
			ld.status = 'Closed-converted';
			ld.company = 'Test Company';
			leadList.add(ld);
		}
		Insert leadList;
	}
	@IsTest
	public static void updateConvertOnInsertTest(){
		List<Lead>leadList = [SELECT Id FROM Lead WHERE converted__c = true];
		Test.startTest();
		Assert.areEqual(10,leadList.size());
		Test.stopTest();
	}
	@IsTest
	public static void updateConvertOnUpdateTest(){
		List<Lead>leadList = [SELECT Id,status FROM Lead WHERE status = 'closed-converted' LIMIT 5];
		for(Lead ld : leadList){
			ld.status = 'open-Not Connected';
		}
		update leadList;
		List<Lead>newLeadList = [SELECT Id FROM Lead WHERE converted__c = true];
		Test.startTest();
		Assert.areEqual(5,newLeadList);
		Test.stopTest();
	}
}

*** Whenever an opportunity is created,populate manager of opportunity owner on custom field of opportunity record.

trigger opportunityTrigger on opportunity(before insert){
	if(trigger.isInsert && trigger.isBefore){
		opportunityTriggerHandler.updateOppOwnerManager(trigger.new);
	}
}

public class opportunityTriggerHandler{	 
	public static void updateOppOwnerManager(List<Opportunity>oppList){
		Set<Id> ownerId = new Set<Id>();
		for(Opportunity opp : oppList){
			if(!isEmpty(opp.OwnerId)){
				ownerId.add(opp.ownerId);
			}
		}
		List<User>ownerList = [SELECT Manager FROM User Where Manager IN :ownerId];
		Map<Id,Id>userToManager = new Map<Id,Id>();
		for(User u : ownerList){
			userToManager.put(u.id,u.ManagerId);
		}
		for(Opportunity opp : oppList){
			if(userToManager.containsKey(opp.ownerId)){
				opp.ownerManager__c = userToManager.get(opp.ownerId);
			}
		}
	}
}

*** Create a task everytime when a new opportunity gets created.
trigger opportunityTrigger on Opportunity(after insert){
	if(trigger.isAfter && trigger.isInsert()){
		opportunityTriggerHandler.createTaskOnOpportunity(trigger.new);
	}
}
public class opportunityTriggerHandler {
	public static void(List<Opportunity>oppList){
		List<Task>taskList = new list<Task>();
		for(Opportunity opp : oppList){
			Task tsk  = new Task();
			tsk.WhatId = opp.Id;
			tsk.status = 'In Progress';
			tsk.OwnerId = opp.OwnerId;
			taskList.add(tsk);
		}
		try{
			Database.saveResult[] result = Database.insert(taskList,false);
			for(Database.SaveResult sr : result){
				if(!sr.isSuccess()){
					for(Database.Error er : sr.getErrors()){
						system.debug(er);
					}
				}
			}
		}
		Catch(Exception e){
			system.debug(e);
		}
	}
}

*** Rollup sumamry trigger for Account to display total number of related opportunities

trigger opportunityTrigger on Opportunity(after insert,after update,after delete,after undelete){
	if(trigger.isAfter){
		if(trigger.isInsert || trigger.isUndelete){
			opportunityTriggerHandler.countOpportunitiesOnInsert(trigger.new);
		}
		if(trigger.isUpdate){
			opportunityTriggerHandler.countOpportunitiesOnUpdate(trigger.new,trigger.oldMap);
		}
		if(trigger.isDelete){
			opportunityTriggerHandler.countOpportunitiesOnDelete(trigger.old);
		}
	}
}
------------------USING MAP --------------------------
public class opportunityTriggerHandler{
	set<Id>accIds = new Set<Id>();
	public void countOpportunitiesOnInsert(List<Opportunity>oppList){
		for(Opportunity opp : oppList){
			if(!isEmpty(opp.AccountId)){
				accIds.add(opp.AccountId);
			}
		}
	}
	public void countOpportunitiesOnUpdate(List<Opportunity>oppList,Map<Id,Opportunity>oppMap){
		for(opportunity opp : oppList){
			if(!isEmpty(opp.AccountId) && opp.AccountId != oppMap.get(opp.Id).AccountId){
				accIds.add(opp.AccountId);
				accIds.add(oppMap.get(opp.Id).AccountId);
			}
		}
	}
	public void countOpportunitiesOnDelete(List<Opportunity>oppList){
		for(Opportunity opp : oppList){
			if(!isEmpty(opp.AccountId)){
				accIds.add(opp.AccountId);
			}
		}
	}
	Map<Id,List<Opportunity>>accToOppsMap = new Map<Id,List<Opportunity>>();
	List<Account>accsToUpdate = new List<Account>();
	for(Opportunity opp: [SELECT Id,AccountId FROM Opportunity WHERE AccountId IN :accIds]){
		if(!isEmpty(opp.AccountId)){
			if(accToOppsMap.containsKey(opp.AccountId)){
				accToOppsMap.get(opp.AccountId).add(opp);
			}
			else{
				accToOppsMap.add(opp.AccountId,list<opportunity>(opp));
			}
		}
	}
	for(Id id : accToOppsMap.keySet()){
		Account acc = new Account();
		acc.Id = id;
		acc.totalOpportunities__c = accToOppsMap.get(id).size();
		accsToUpdate.add(acc);
	}
	if(!isEmpty(accsToUpdate)){
		try{
			Database.SaveResult[] result = Database.update(accsToUpdate);
			for(Database.SaveResult res : result){
				if(!res.isSuccess()){
					for(Database.Error er : res.getErrors()){
						system.debug(er);
					}
				}
				
			}
		}
		catch(Exception e){
		}
	}
	Map<Id,Decimal>accToAmount = new Map<Id,Decimal>();
	List<Account>accsToUpdateWithAmount = new List<Account>();
	for(Opportunity opp: [SELECT Id,AccountId,Amount FROM Opportunity WHERE AccountId IN :accIds]){
		Decimal totalAmount = 0;
		if(!isEmpty(opp.AccountId) && opp.Amount!=null){
			if(accToAmount.containsKey(opp.AccountId)){
				totalAmount = accToAmount.get(opp.AccountId);
			}
			totalAmount = totalAmount + opp.Amount;
		}
		accToAmount.put(opp.AccountId,totalAmount);
	}
	for(Id id : accToAmount.keySet()){
		Account acc = new Account();
		acc.Id = id;
		acc.totalAmount__c = accToOppsMap.get(id);
		accsToUpdateWithAmount.add(acc);
	}
	if(!isEmpty(accsToUpdate)){
		try{
			Database.SaveResult[] result = Database.update(accsToUpdateWithAmount);
			for(Database.SaveResult res : result){
				if(!res.isSuccess()){
					for(Database.Error er : res.getErrors()){
						system.debug(er);
					}
				}
				
			}
		}
		catch(Exception e){
		}
	}

}
----------------------------USING NESTED QUERY---------------------------------
public class opportunityTriggerHandler{
	set<Id>accIds = new Set<Id>();
	public void countOpportunitiesOnInsert(List<opportunity>oppList){
		for(opportunity opp : oppList){
			if(!isEmpty(opp.AccountId)){
				accIds.add(opp.AccountId);
			}
		}
	}
	public void countOpportunitiesOnUpdate(List<opportunity>oppList,Map<Id,opportunity>oppMap){
		for(Opportunity opp : oppList){
			if(!isEmpty(opp.AccountId) && (opp.AccountId != oppMap.get(opp.Id).AccountId)){
				accIds.add(opp.AccountId);
				accIds.add(oppMap.get(opp.Id).AccountId));
			}
		}
	}
	public static void countOpportunitiesOnDelete(){
		for(opportunity opp : oppList){
			if(!isEmpty(opp.AccountId)){
				accIds.add(opp.AccountId);
			}
		}
	}
	List<Account>accountsToUpdate = new List<Account>();
	for(Account acc: [SELECT Id,(SELECT Id FROM opportunity) FROM Account WHERE Id IN :accIds]){
		acc.oppCount__c == acc.opportunity.size();
		accountsToUpdate.add(acc);
	}
	Map<Id,Decimal>accIdToRevenue = new Map<Id,Decimal>();
	for(Opportunity opp : [SELECT Id,Amount from opportunity WHERE AccountId IN :accIds ]){
		decimal total  = 0;
		if(accIdToRevenue.containsKey(opp.AccountId)){
			total = accIdToRevenue.get(opp.AccountId);
		}
		if(opp.Amount != null){
			total = total + opp.Amount;
		}
		accIdToRevenue.put(opp.AccountId,total);
	}
	for(Id i : accIds.keySet()){
		Account a = new Account;
		a.id = i.id;
		a.oppAmount = accIdToRevenue.get(i);
		accountsToUpdate.add(a);
	}
	
}


*** On click of a custom checkbox on account create task on primary contact of account
trigger accountTrigger on Account(after insert,after update){
	if(trigger.isAfter){
		if(trigger.isInsert){
			accountTriggerHandler.createTaskOnPrimaryContact(trigger.new);
		}
		if(trigger.isUpdate){
			accountTriggerHandler.createTaskOnPrimaryContactOnUpdate(trigger.new,trigger.oldMap);
		}
	}
}
public class accountTriggerHandler{
	set<Id>accIds = new Set<Id>();
	list<Contact>primaryContacts = new List<Contact>();
	list<Task>taskList = new List<Task>();
	public static void createTaskOnPrimaryContact(List<Account>accList){
		for(Account acc: accList){
			if(acc.createTask__c == true){
				accIds.add(acc);
			}
		}
		createTasksOnPrimaryCon();
	}
	public static void createTaskOnPrimaryContactOnUpdate(List<Account>accList,Map<Id,Account>accMap){
		for(Account acc: accList){
			if(acc.createTask__c == true && acc.createTask__c != accMap.get(acc.Id).createTask__c){
				accIds.add(acc);
			}
		}
		createTasksOnPrimaryCon();
	}
	public static void createTasksOnPrimaryCon(){
		for(Contact c : [SELECT Id,AccountId FROM Contact WHERE primaryContact__c = true AND AccountId IN accIds]){
			Task t = new Task();
			t.status = 'In progress';
			t.whatId = c.Id;
			t.OwnerId = c.ownerId;
			taskList.add(t);
		}
		if(!taskList.isEmpty()){
			try{
				Database.SaveResult[] result = Database.insert(taskList,false);
				for(Database.SaveResult sr : result){
					if(!sr.isSuccess){
						for(Database.Error er : sr.getErrors()){
							system.debug(er);
						}
					}
				}
			}
			catch(Exception e){
				system.debug(e);
			}
		}
	}
}
